package com.termux.x11;
import java.util.HashMap;
import android.content.Context;
import com.termux.x11.utils.TermuxX11ExtraKeys;
import com.example.tiny_computer.R;

public class Prefs extends LoriePreferences.PrefsProto {
  public final ListPreference displayResolutionMode = new ListPreference("displayResolutionMode", "native", R.array.displayResolutionVariants, R.array.displayResolutionVariants);
  public final IntPreference displayScale = new IntPreference("displayScale", 100);
  public final ListPreference displayResolutionExact = new ListPreference("displayResolutionExact", "1280x1024", R.array.displayResolution, R.array.displayResolution);
  public final StringPreference displayResolutionCustom = new StringPreference("displayResolutionCustom", "1280x1024");
  public final BooleanPreference adjustResolution = new BooleanPreference("adjustResolution", false);
  public final BooleanPreference displayStretch = new BooleanPreference("displayStretch", false);
  public final BooleanPreference Reseed = new BooleanPreference("Reseed", true);
  public final BooleanPreference PIP = new BooleanPreference("PIP", true);
  public final BooleanPreference fullscreen = new BooleanPreference("fullscreen", true);
  public final ListPreference forceOrientation = new ListPreference("forceOrientation", "no", R.array.forceOrientationVariants, R.array.forceOrientationVariants);
  public final BooleanPreference hideCutout = new BooleanPreference("hideCutout", false);
  public final BooleanPreference keepScreenOn = new BooleanPreference("keepScreenOn", true);
  public final BooleanPreference xrMode = new BooleanPreference("xrMode", false);
  public final ListPreference touchMode = new ListPreference("touchMode", "1", R.array.touchscreenInputModesEntries, R.array.touchscreenInputModesValues);
  public final BooleanPreference scaleTouchpad = new BooleanPreference("scaleTouchpad", true);
  public final BooleanPreference showStylusClickOverride = new BooleanPreference("showStylusClickOverride", false);
  public final BooleanPreference stylusIsMouse = new BooleanPreference("stylusIsMouse", false);
  public final BooleanPreference stylusButtonContactModifierMode = new BooleanPreference("stylusButtonContactModifierMode", false);
  public final BooleanPreference showMouseHelper = new BooleanPreference("showMouseHelper", false);
  public final BooleanPreference pointerCapture = new BooleanPreference("pointerCapture", false);
  public final ListPreference transformCapturedPointer = new ListPreference("transformCapturedPointer", "no", R.array.transformCapturedPointerEntries, R.array.transformCapturedPointerValues);
  public final IntPreference capturedPointerSpeedFactor = new IntPreference("capturedPointerSpeedFactor", 100);
  public final BooleanPreference tapToMove = new BooleanPreference("tapToMove", true);
  public final BooleanPreference showAdditionalKbd = new BooleanPreference("showAdditionalKbd", true);
  public final BooleanPreference additionalKbdVisible = new BooleanPreference("additionalKbdVisible", true);
  public final BooleanPreference showIMEWhileExternalConnected = new BooleanPreference("showIMEWhileExternalConnected", true);
  public final BooleanPreference preferScancodes = new BooleanPreference("preferScancodes", false);
  public final BooleanPreference hardwareKbdScancodesWorkaround = new BooleanPreference("hardwareKbdScancodesWorkaround", true);
  public final BooleanPreference dexMetaKeyCapture = new BooleanPreference("dexMetaKeyCapture", false);
  public final BooleanPreference enableAccessibilityServiceAutomatically = new BooleanPreference("enableAccessibilityServiceAutomatically", false);
  public final BooleanPreference pauseKeyInterceptingWithEsc = new BooleanPreference("pauseKeyInterceptingWithEsc", false);
  public final BooleanPreference filterOutWinkey = new BooleanPreference("filterOutWinkey", false);
  public final BooleanPreference enableGboardCJK = new BooleanPreference("enableGboardCJK", false);
  public final BooleanPreference clipboardEnable = new BooleanPreference("clipboardEnable", true);
  public final BooleanPreference storeSecondaryDisplayPreferencesSeparately = new BooleanPreference("storeSecondaryDisplayPreferencesSeparately", false);
  public final BooleanPreference adjustHeightForEK = new BooleanPreference("adjustHeightForEK", true);
  public final BooleanPreference useTermuxEKBarBehaviour = new BooleanPreference("useTermuxEKBarBehaviour", true);
  public final IntPreference opacityEKBar = new IntPreference("opacityEKBar", 100);
  public final ListPreference swipeUpAction = new ListPreference("swipeUpAction", "no action", R.array.userActionsValues, R.array.userActionsValues);
  public final ListPreference swipeDownAction = new ListPreference("swipeDownAction", "toggle additional key bar", R.array.userActionsValues, R.array.userActionsValues);
  public final ListPreference volumeUpAction = new ListPreference("volumeUpAction", "no action", R.array.userActionsVolumeUpValues, R.array.userActionsVolumeUpValues);
  public final ListPreference volumeDownAction = new ListPreference("volumeDownAction", "no action", R.array.userActionsVolumeDownValues, R.array.userActionsVolumeDownValues);
  public final ListPreference backButtonAction = new ListPreference("backButtonAction", "toggle additional key bar", R.array.userActionsValues, R.array.userActionsValues);
  public final ListPreference notificationTapAction = new ListPreference("notificationTapAction", "open preferences", R.array.userActionsValues, R.array.userActionsValues);
  public final ListPreference notificationButton0Action = new ListPreference("notificationButton0Action", "open preferences", R.array.userActionsValues, R.array.userActionsValues);
  public final ListPreference notificationButton1Action = new ListPreference("notificationButton1Action", "exit", R.array.userActionsValues, R.array.userActionsValues);
  public final StringPreference extra_keys_config = new StringPreference("extra_keys_config", TermuxX11ExtraKeys.DEFAULT_IVALUE_EXTRA_KEYS);
  public final HashMap<String, Preference> keys = new HashMap<String, Preference>() {{
    put("displayResolutionMode", displayResolutionMode);
    put("displayScale", displayScale);
    put("displayResolutionExact", displayResolutionExact);
    put("displayResolutionCustom", displayResolutionCustom);
    put("adjustResolution", adjustResolution);
    put("displayStretch", displayStretch);
    put("Reseed", Reseed);
    put("PIP", PIP);
    put("fullscreen", fullscreen);
    put("forceOrientation", forceOrientation);
    put("hideCutout", hideCutout);
    put("keepScreenOn", keepScreenOn);
    put("xrMode", xrMode);
    put("touchMode", touchMode);
    put("scaleTouchpad", scaleTouchpad);
    put("showStylusClickOverride", showStylusClickOverride);
    put("stylusIsMouse", stylusIsMouse);
    put("stylusButtonContactModifierMode", stylusButtonContactModifierMode);
    put("showMouseHelper", showMouseHelper);
    put("pointerCapture", pointerCapture);
    put("transformCapturedPointer", transformCapturedPointer);
    put("capturedPointerSpeedFactor", capturedPointerSpeedFactor);
    put("tapToMove", tapToMove);
    put("showAdditionalKbd", showAdditionalKbd);
    put("additionalKbdVisible", additionalKbdVisible);
    put("showIMEWhileExternalConnected", showIMEWhileExternalConnected);
    put("preferScancodes", preferScancodes);
    put("hardwareKbdScancodesWorkaround", hardwareKbdScancodesWorkaround);
    put("dexMetaKeyCapture", dexMetaKeyCapture);
    put("enableAccessibilityServiceAutomatically", enableAccessibilityServiceAutomatically);
    put("pauseKeyInterceptingWithEsc", pauseKeyInterceptingWithEsc);
    put("filterOutWinkey", filterOutWinkey);
    put("enableGboardCJK", enableGboardCJK);
    put("clipboardEnable", clipboardEnable);
    put("storeSecondaryDisplayPreferencesSeparately", storeSecondaryDisplayPreferencesSeparately);
    put("adjustHeightForEK", adjustHeightForEK);
    put("useTermuxEKBarBehaviour", useTermuxEKBarBehaviour);
    put("opacityEKBar", opacityEKBar);
    put("swipeUpAction", swipeUpAction);
    put("swipeDownAction", swipeDownAction);
    put("volumeUpAction", volumeUpAction);
    put("volumeDownAction", volumeDownAction);
    put("backButtonAction", backButtonAction);
    put("notificationTapAction", notificationTapAction);
    put("notificationButton0Action", notificationButton0Action);
    put("notificationButton1Action", notificationButton1Action);
    put("extra_keys_config", extra_keys_config);
  }};

  public Prefs(Context ctx) {
    super(ctx);
  }
}
